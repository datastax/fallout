#!/bin/bash -ex

# Bootstrap pipx and then use it to install poetry, avoiding the use of
# `curl`ed scripts, and using specific versions (for both security and
# stability).

function pip()
{
    command pip3 "$@"
}

function installed()
{
    which "$1" >/dev/null 2>&1
}

export PIPX_VERSION=${PIPX_VERSION:-0.16.1.0}
export POETRY_VERSION=${POETRY_VERSION:-1.1.5}
export PIPX_DEFAULT_PYTHON=${PIPX_DEFAULT_PYTHON:-python3.7}

# Ensure ~/.local/bin is in the path; some OS's don't do this
PATH="$HOME/.local/bin:$PATH"

# Because both pip install --user and pipx create a
# symlink at ~/.local/bin/pipx, we need to install
# pipx twice to make sure the symlink is correct
if ! installed pipx; then
    # Install pipx in the user's global environment to ~/.local/bin/pipx
    pip install --user pipx=="$PIPX_VERSION"

    # Use the pipx installed above to install pipx in a venv specific to
    # pipx as ~/.local/bin/pipx
    pipx install pipx

    # Uninstall pipx from the user's global environment; this deletes
    # ~/.local/bin/pipx, so we have to restore it by...
    pip uninstall --yes pipx

    # ...reinstalling pipx using pipx.
    "$HOME/.local/pipx/venvs/pipx/bin/pipx" install --force pipx

    # Tell the shell to recalculate its command lookup hash table
    hash -r
fi

# Install poetry without `curl`ing
if ! installed poetry; then
    pipx install poetry=="$POETRY_VERSION"
fi
